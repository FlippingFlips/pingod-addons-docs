<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>P-ROC - PinGod NetProc on PinGod AddOns</title>
    <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/index.html</link>
    <description>Recent content in P-ROC - PinGod NetProc on PinGod AddOns</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Dec 2022 15:26:15 +0000</lastBuildDate><atom:link href="https://FlippingFlips.github.io/pingod-addons/pingodnetproc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/getting-started/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/getting-started/index.html</guid>
      <description>We&amp;rsquo;ll use the template project we built for PinGod P-ROC for this guide / overview. examples/pingod-netproc-pdb
We will focus on the P3-ROC / PDB board. We do intend to add the same for the original P-ROC board, it&amp;rsquo;s just untested.
This uses a IFakeProcDevice, but that can be swapped with a single simulated flag when the game is created in the ProcPinGodGame.cs.
You will want more or less the setup from the beginning guide.</description>
    </item>
    <item>
      <title>Building / Debug</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/building-running/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/building-running/index.html</guid>
      <description>Building Project You should be able to build the project with dotnet build providing you have linked or added the addons directory.
It can be built inside Godot 4 by running the project editor godot -e.
Running You can run from command line with godot no debug
Debugging Visual Studio is very good here for debugging. Use the Properties/launchSettings.json to adjust launch profiles.
Option Description Godot4 (Debug with Console) Uses the godot_console.</description>
    </item>
    <item>
      <title>Autoloads</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/autoloads/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/autoloads/index.html</guid>
      <description>Autoloads are scenes that we are overriding from the res://autoload directory. These are plugins that can be disabled in the Godot Project Settings. Parts of your game should be able to run without these plugins but in some cases they will need each other to work fully in a game.
Scene Description Adjustments.tscn Not used. Our adjustments come from the database through P-ROC not PinGod AudioManager.tscn Same as existing. For your own sound assets.</description>
    </item>
    <item>
      <title>ProcScene - Main Scene</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/procscene/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/procscene/index.html</guid>
      <description>This scene is the first scene to load. It is a placeholder with nothing to load inside of it apart from two CanvasLayers, which are placeholders for Modes and an Overlay.
When the game is running, any modes that need to be visible can be added to the Modes CanvasLayer.
The CanvasLayers have a priority, so that covers mode priority in a similar fashion to DMD layers / modes from the original P-ROC.</description>
    </item>
    <item>
      <title>Mode - PinGodProcMode:IMode</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingodprocmode/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingodprocmode/index.html</guid>
      <description>This is a Base mode using the NetProc P-ROC Mode / IMode and can be found in modes/PinGodProcMode.cs.
These modes have access to the P-ROC game controller and can be used for your game logic and switch handling.
When a mode is created it gets access to the Resources pingod plugin and gets the Modes canvas from the ProcScene.
The default modes node path, string modesRootPath = &amp;quot;/root/ProcScene/Modes&amp;quot;;
About P-ROC Modes The p-roc modes have some methods to override.</description>
    </item>
    <item>
      <title>Database - Sql</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/database-sql/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/database-sql/index.html</guid>
      <description>The nuget package NetProc.Data will provide you with .sql files to seed database data.
This creates a sqlite database and saves everything here from the game, from machine items to game audits and adjustments.
Adjustments Switches Coils LEDS Lamps Audits GamesPlayed BallsPlayed Players Scores You will edit one of the files depending on the machine type, but before you edit, copy the file and create your own into the sql directory.</description>
    </item>
    <item>
      <title>PinGodGamePROC</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingodgame.tscn/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingodgame.tscn/index.html</guid>
      <description>This scene overrides from the default PinGodGame.tscn from autoload/PinGodGame.tscn.
In Godots scene inspector there are some developer debugging options that can be set:
Option Default Description Proc Delay 10 Delays the proc loop, setting 10 here helps with simulation Delete Db On Init off Deletes the database when the game is run. This is useful if you add switches to the .sql import file when developing Simulated on Game is simulated and will use a FakePinProc LogLevel Verbose Log level setting for PinGodGame and NetProc.</description>
    </item>
    <item>
      <title>PinGodProc GameController</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingod-procgame-controller/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingod-procgame-controller/index.html</guid>
      <description>This is the main GameController for P-ROC which is based from a Database Game Controller in NetProc.
Here you will find the main event methods for a game and get access to the machine items from the .sql
When the game is created a database will be created for the game which holds settings, saves audits. All of this is taken care of but you can add your own audits / adjustments to the .</description>
    </item>
    <item>
      <title>Mode - Base Modes</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/proc-basemodes/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/proc-basemodes/index.html</guid>
      <description>Trough This is loaded with the game controller. All you have to do is tag your switches correctly in the .sql machine configuration and it will handle the rest.
Make sure you have trough tags for switches and eject coil. Plunger lane, early save switches if using. These can be found in the example .sql.
Other modes In the proc/PinGodProcGameController.cs script when the game resources have fully loaded and called MachineResourcesReady, then some modes are created.</description>
    </item>
    <item>
      <title>Mode - AttractMode</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/attractmode/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/attractmode/index.html</guid>
      <description>In the modes directory you&amp;rsquo;ll find AttractMode.cs. This is a P-ROC mode script using the base PinGodProcMode because we need visible layers here.
This needs a reference to a scene in res://scenes/AttractMode/AttractProc.tscn.
This scene is set in the Resources.tscn to pre load it so we can just create instances when we need to.
Scene and Script The script gets the top scores from the database and populates the base Attract.cs high score lists.</description>
    </item>
    <item>
      <title>Mode - ScoreDisplayProcMode</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/scoredisplayprocmode/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/scoredisplayprocmode/index.html</guid>
      <description>In the modes directory you&amp;rsquo;ll find ScoreDisplayProcMode.cs. This is a P-ROC mode script using the base PinGodProcMode because we need visible layers here.
Uses a reference to a scene in res://scenes/ScoreMode/ScoreModeProc.tscn. This scene is also set in the Resources.tscn. To pre load it so we can just create instances when we need to.
Scene and Script The change here lies within the ScoreModeProc.cs which is based off the existing PinGodGame ScoreMode.</description>
    </item>
    <item>
      <title>Mode - MyMode</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/mymode/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/mymode/index.html</guid>
      <description>In the modes directory you&amp;rsquo;ll find MyMode.cs. This will be loaded when the default game is run.
It&amp;rsquo;s is a P-ROC mode script using the base PinGodProcMode but this mode doesn&amp;rsquo;t dislay any scene, it runs as mode to and just access game controller.
P-ROC Mode Start / Stop When this mode starts it uses the Trough to launch a ball in play.
P-ROC Switch Handlers switch Description start adds more players if ball=1 , credits and players &amp;lt; 4 slingL add 100 points slingR add 100 points inlaneL add 100 points inlaneR add 100 points outlaneL add 100 points outlaneR add 100 points saucer when active for 1 second it will add 250 then eject the ball bumperHit All bumpers call this for 150 points targetHit All targets tagged with targetBank add 200 points Creating Modes </description>
    </item>
    <item>
      <title>Simulator - Switch Window</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/simulator-window/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/simulator-window/index.html</guid>
      <description>In the autoload/Machine.tscn you can enable a switch window. This window is embedded and kind of a hack but allows to run multple windows.
If your main display is set to full screen then you would want two displays to show the switch window.
On the window you can push switches in a separate window to the game which is quicker than key presses especially when it comes to the trough as you can toggle all here.</description>
    </item>
    <item>
      <title>Simulator - Visual Pinball</title>
      <link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/simulator-vp/index.html</link>
      <pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate>
      <guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/simulator-vp/index.html</guid>
      <description>There is a demo table provided in the visual_pinball directory.
🔗 Visual Pinball 10 - Releases
Script is almost identical to the PinGodGame.
To run this with Visual Pinball you just need a COM controller setup and scripts for visual pinball then the game can be launched from the .bat files or manually.
🔗 pingod-controller-com - Releases</description>
    </item>
  </channel>
</rss>